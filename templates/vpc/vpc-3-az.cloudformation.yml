
AWSTemplateFormatVersion: 2010-09-09

Description: |
  VPC-3-AZs - VPC built using AWS CloudFormation

Parameters:

  VPCName:       { Type: "String", Default: "VPC-3-AZs"     , Description: "VPC name. Default: VPC-3-AZs." }
  CIDRVpc:       { Type: "String", Default: "10.100.0.0/16" , Description: "VPC CIDR"                  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }

  CIDRPublicA:   { Type: "String", Default: "10.100.11.0/24", Description: "VPC CIDR Subnet Public-A"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPrivateA:  { Type: "String", Default: "10.100.12.0/24", Description: "VPC CIDR Subnet Private-A" , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRDBSubnetA: { Type: "String", Default: "10.100.13.0/24", Description: "VPC CIDR Subnet DBSubnet-A", AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }

  CIDRPublicB:   { Type: "String", Default: "10.100.21.0/24", Description: "VPC CIDR Subnet Public-B"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPrivateB:  { Type: "String", Default: "10.100.22.0/24", Description: "VPC CIDR Subnet Private-B" , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRDBSubnetB: { Type: "String", Default: "10.100.23.0/24", Description: "VPC CIDR Subnet DBSubnet-B", AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }

  CIDRPublicC:   { Type: "String", Default: "10.100.31.0/24", Description: "VPC CIDR Subnet Public-C"  , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRPrivateC:  { Type: "String", Default: "10.100.32.0/24", Description: "VPC CIDR Subnet Private-C" , AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }
  CIDRDBSubnetC: { Type: "String", Default: "10.100.33.0/24", Description: "VPC CIDR Subnet DBSubnet-C", AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }

  SSHLocation:   { Type: "String", Default: "0.0.0.0/0"  , Description: "SSH source. Default:0.0.0.0/0", AllowedPattern: "(\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[.](\\d{1,3})[/](\\d{1,2})", ConstraintDescription: "Must be a CIDR range a.b.c.d/x." }


Mappings:

    "VPCRange": {
      "VPC"       : { "CIDR": "10.100.0.0/16"  },

      "PublicA"   : { "CIDR": "10.100.11.0/24" },
      "PrivateA"  : { "CIDR": "10.100.12.0/24" },
      "DBSubnetA" : { "CIDR": "10.100.13.0/24" },

      "PublicB"   : { "CIDR": "10.100.21.0/24" },
      "PrivateB"  : { "CIDR": "10.100.22.0/24" },
      "DBSubnetB" : { "CIDR": "10.100.23.0/24" },

      "PublicC"   : { "CIDR": "10.100.31.0/24" },
      "PrivateC"  : { "CIDR": "10.100.32.0/24" },
      "DBSubnetC" : { "CIDR": "10.100.33.0/24" }
    }


Resources:

  ###
  ### VPC + IGW
  ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRVpc
      Tags:
        - { Key: Name , Value: !Ref VPCName }

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: { "Fn::Join":["",[ "IGW-",{"Ref":"VPCName" } ]] } }
        - { Key: VPC , Value: !Ref VPCName       }

  # Attach IGW to VPC
  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: { VpcId: !Ref VPC, InternetGatewayId: !Ref IGW }


  ###
  ### Public Routing
  ###   - Route-Table-Public
  ###
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: Route-Table-Public  }
        - { Key: VPC , Value: !Ref VPCName        }

  # Route to IGW
  RouteIGW:
    Type: AWS::EC2::Route
    DependsOn: IGW
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW


  ###
  ### Security Group for SSH
  ###
  SecurityGroupSSH:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: SSHSecurityGroup
      GroupDescription: Default SSH SecurityGroup
      SecurityGroupIngress:
        - { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "SSHLocation" } }
      Tags:
        - { Key: Name, Value: SSHSecurityGroup }
        - { Key: VPC , Value: !Ref VPCName     }



  ###
  ### Availability Zone A
  ###


  ##
  ## Subnet: Public-A
  ## ----------------
  ##
  SubnetPubA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicA
      AvailabilityZone: { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PubSubnet-A  }
        - { Key: VPC , Value: !Ref VPCName }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubA, RouteTableId: !Ref RouteTablePublic }


  ##
  ## NAT Gateway-A
  ##
  EIPNatA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref SubnetPubA
      AllocationId: { "Fn::GetAtt" : ["EIPNatA", "AllocationId"]}
      Tags:
        - { Key: Name, Value: { "Fn::Join":["",[ {"Ref":"VPCName" },"::Nat-A" ]] } }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Route Table Priv-A
  ##
  RouteTablePrivA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: Route-Table-Priv-A }
        - { Key: VPC , Value: !Ref VPCName       }

  # Route to NAT-A
  RouteNatA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatA


  ##
  ## Subnets: Private-A, DbSubnet-A
  ## ------------------------------
  ##
  SubnetPrivA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateA
      AvailabilityZone: { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PrivSubnet-A  }
        - { Key: VPC , Value: !Ref VPCName }

  SubnetDbA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRDBSubnetA
      AvailabilityZone: { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: DbSubnet-A   }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Subnets: Associations
  ##
  RouteTableAssociationPrivA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPrivA, RouteTableId: !Ref RouteTablePrivA }

  RouteTableAssociationDbA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetDbA,   RouteTableId: !Ref RouteTablePrivA }



  ###
  ### Availability Zone B
  ###


  ##
  ## Subnet: Public-B
  ## ----------------
  ##
  SubnetPubB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicB
      AvailabilityZone: { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PubSubnet-B  }
        - { Key: VPC , Value: !Ref VPCName }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubB, RouteTableId: !Ref RouteTablePublic }


  ##
  ## NAT Gateway-B
  ##
  EIPNatB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatB:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref SubnetPubB
      AllocationId: { "Fn::GetAtt": ["EIPNatB", "AllocationId"]}
      Tags:
        - { Key: Name, Value: { "Fn::Join":["",[ {"Ref":"VPCName" },"::Nat-B" ]] } }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Route Table Priv-B
  ##
  RouteTablePrivB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: Route-Table-Priv-B }
        - { Key: VPC , Value: !Ref VPCName       }

  # Route to NAT-B
  RouteNatB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatB


  ##
  ## Subnets: Private-B, DbSubnet-B
  ## ------------------------------
  ##
  SubnetPrivB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateB
      AvailabilityZone: { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PrivSubnet-B  }
        - { Key: VPC , Value: !Ref VPCName }

  SubnetDbB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRDBSubnetB
      AvailabilityZone: { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: DbSubnet-B   }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Subnets: Associations
  ##
  RouteTableAssociationPrivB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPrivB, RouteTableId: !Ref RouteTablePrivB }

  RouteTableAssociationDbB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetDbB,   RouteTableId: !Ref RouteTablePrivB }


  ###
  ### Availability Zone C
  ###


  ##
  ## Subnet: Public-C
  ## ----------------
  ##
  SubnetPubC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicC
      AvailabilityZone: { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PubSubnet-C  }
        - { Key: VPC , Value: !Ref VPCName }

  # Attach to: Route-Table-Public
  RouteTableAssociationPubC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPubC, RouteTableId: !Ref RouteTablePublic }


  ##
  ## NAT Gateway-C
  ##
  EIPNatC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatC:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref SubnetPubC
      AllocationId: { "Fn::GetAtt": ["EIPNatC", "AllocationId"]}
      Tags:
        - { Key: Name, Value: { "Fn::Join":["",[ {"Ref":"VPCName" },"::Nat-C" ]] } }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Route Table Priv-C
  ##
  RouteTablePrivC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: Route-Table-Priv-C }
        - { Key: VPC , Value: !Ref VPCName       }

  # Route to NAT-C
  RouteNatC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatC


  ##
  ## Subnets: Private-C, DbSubnet-C
  ## ------------------------------
  ##
  SubnetPrivC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateC
      AvailabilityZone: { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: PrivSubnet-C }
        - { Key: VPC , Value: !Ref VPCName }

  SubnetDbC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRDBSubnetC
      AvailabilityZone: { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
      Tags:
        - { Key: Name, Value: DbSubnet-C   }
        - { Key: VPC , Value: !Ref VPCName }

  ##
  ## Route Table Priv-C: Associations
  ##
  RouteTableAssociationPrivC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetPrivC, RouteTableId: !Ref RouteTablePrivC }

  RouteTableAssociationDbC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref SubnetDbC,   RouteTableId: !Ref RouteTablePrivC }



Outputs:

  VPC:         { Description: "VPC id"    , Value: { "Ref": "VPC"         } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-VPC"         } } }

  EIPNatA:     { Description: "Public IP" , Value: { "Ref": "EIPNatA"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-EIPNatA"     } } }
  PubSubnetA:  { Description: "Subnet id" , Value: { "Ref": "SubnetPubA"  } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubA"  } } }
  PrivSubnetA: { Description: "Subnet id" , Value: { "Ref": "SubnetPrivA" } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPrivA" } } }
  DbSubnetA:   { Description: "Subnet id" , Value: { "Ref": "SubnetDbA"   } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetDbA"   } } }

  EIPNatB:     { Description: "Public IP" , Value: { "Ref": "EIPNatB"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-EIPNatB"     } } }
  PubSubnetB:  { Description: "Subnet id" , Value: { "Ref": "SubnetPubB"  } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubB"  } } }
  PrivSubnetB: { Description: "Subnet id" , Value: { "Ref": "SubnetPrivB" } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPrivB" } } }
  DbSubnetB:   { Description: "Subnet id" , Value: { "Ref": "SubnetDbB"   } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetDbB"   } } }

  EIPNatC:     { Description: "Public IP" , Value: { "Ref": "EIPNatC"     } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-EIPNatC"     } } }
  PubSubnetC:  { Description: "Subnet id" , Value: { "Ref": "SubnetPubC"  } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPubC"  } } }
  PrivSubnetC: { Description: "Subnet id" , Value: { "Ref": "SubnetPrivC" } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetPrivC" } } }
  DbSubnetC:   { Description: "Subnet id" , Value: { "Ref": "SubnetDbC"   } , Export: { Name: { "Fn::Sub": "${AWS::StackName}-SubnetDbC"   } } }

